#!/bin/zsh

## DATABASE SETTINGS
STORE="$HOME/.local/share"
SHOOTS="xpanda.json"
FILE="$STORE/$SHOOTS"

## Ensure data store exists
mkdir -p "$STORE"
[[ ! -s "$FILE" ]] && echo '{}' > "$FILE"

## UTILITY FUNCTIONS
print_shoot() {
    local key="$1"
    local value="$2"
    echo "ðŸŒ± $key â†’ $value"
}

clip_copy() {
    local text="$1"
    echo "COPYING: $text" >> /tmp/xpanda_debug.log
    if [[ "$(uname)" == "Darwin" ]]; then
        echo -n "$text" | pbcopy
    elif [[ "$(uname)" == "Linux" ]]; then 
        echo -n "$text" | xclip -sel clip
    fi
}

clip_paste() {
    if [[ "$(uname)" == "Darwin" ]]; then
        pbpaste
    elif [[ "$(uname)" == "Linux" ]]; then 
        xclip -o -sel clip
    fi
}

## JSON MODIFICATION
add_shoot() {
    local key="$1"
    local value="$2"
    local jstring=". + {\"$key\": \"$value\"}"
    cp "$FILE" "/tmp/xpanda.backup.$(date +%Y-%m-%d_%H-%M-%S)"
    jq "$jstring" "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
}

del_shoot() {
    local key="$1"
    cp "$FILE" "/tmp/xpanda.backup.$(date +%Y-%m-%d_%H-%M-%S)"
    jq "del(.\"$key\")" "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
}

get_shoot() {
    local key="$1"
    jq -r --arg k "$key" '.[$k] // empty' "$FILE"
}

search_shoots() {
    jq -r 'to_entries[] | "\(.key) | \(.value)"' "$FILE" |\
    column -t -s '|' -o '|' | rofi -e -dmenu -p xpanda -mesg 'Format: key | value'
}

shoot_key() {
    echo "$*" | awk -F '|' '{ gsub(/^[ \t]+|[ \t]+$/, "", $1); print $1 }'
}

shoot_val() {
    echo "$*" | awk -F '|' '{ gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2 }'
}

## MODE FLAGS
MODE=""

case "$1" in
    -c|--clip) MODE="clip"; shift ;;
    -d|--del|--delete) MODE="del"; shift ;;
    -D|--daemon) MODE="daemon"; shift ;;
    -e|--edit) MODE="edit"; shift ;;
esac

## CLIP MODE â€” store clipboard into new shoot or copy existing
if [[ "$MODE" == "clip" ]]; then
    keyname="$(shoot_key "$(search_shoots)")"
    [[ -z "$keyname" ]] && exit 1
    value="$(clip_paste)"
    exists="$(get_shoot "$keyname")"

    if [[ -z "$exists" ]]; then
        add_shoot "$keyname" "$value"
        print_shoot "$keyname" "$value"
        notify-send xpanda "Added $keyname â†’ $value to shoot garden"
    else
        clip_copy "$exists"
        notify-send xpanda "Shoot $keyname already exists, copied value to clipboard"
    fi
    exit 0
fi

## DELETE MODE â€” prompt and delete selected shoot
if [[  "$MODE" == "del" ]] ; then
    selection="$(search_shoots)"
    gkey="$(shoot_key "$selection")"
    [[ -z "$gkey" ]] && notify-send xpanda "No shoot selected." && exit 1

    exists="$(get_shoot "$gkey")"
    if [[ -n "$exists" ]]; then
        del_shoot "$gkey"
        notify-send xpanda "Removed shoot $gkey from the garden"
    else
        notify-send xpanda "Shoot $gkey not found â€” nothing removed"
    fi
    exit 0
fi

## DAEMON MODE - loops and creates new shoots automatically when the clipboard is changed
if [[ "$MODE" == "daemon" ]]; then
    LAST=""
    running=true
    notify-send xpanda "Running xpanda in daemon mode"
    while $running; do
        CURRENT="$(clip_paste)"
        if [[ "$CURRENT" != "$LAST" ]]; then
            timestamp="$(date '+%Y-%m-%d_%H-%M-%S')"
            add_shoot "$timestamp" "$CURRENT"
            notify-send xpanda "New clipboard captrued â†’ $timestamp" 
            LAST="$CURRENT"
            echo "$(date): Clipboard changed â†’ $CURRENT" >> /tmp/xpanda-daemon.log
        fi
        sleep 1
    done
    exit 0
fi

## EDIT MODE - change the title of existing shoots
if [[ "$MODE" == "edit" ]]; then
    notify-send xpanda "Entering editing mode"
    selection="$(search_shoots)"
    oldkey="$(shoot_key "$selection")"
    oldval="$(get_shoot "$oldkey")"

    [[ -z "$oldkey" || -z "$oldval" ]] && notify-send xpanda "No valid shoot selected." && exit 1

    # inline editing: prompt for both new key and value
    edit_input="$(echo "$oldkey | $oldval" | rofi -dmenu -p "Edit: key | value")"
    newkey="$(shoot_key "$edit_input")"
    newval="$(shoot_val "$edit_input")"

    [[ -z "$newkey" || -z "$newval" ]] && notify-send xpanda "No changes made." && exit 1

    # skip if unchanged
    if [[ "$newkey" == "$oldkey" && "$newval" == "$oldval" ]]; then
        notify-send xpanda "No changes made to '$oldkey'."
        exit 1
    fi

    # check for key conflict
    if [[ "$newkey" == "$oldkey" ]]; then
        notify-send xpanda "Shoot '$newkey' already exists. Edit cancelled."
        exit 1
    fi

    # Apply changes
    add_shoot "$newkey" "$newval"
    del_shoot "$oldkey"
    notify-send xpanda "Updated: '$oldkey' â†’ '$newkey' with new value"
    exit 0
fi

## NORMAL MODE â€” add or copy shoot
shoot="$(search_shoots)"
[[ -z "$shoot" ]] && exit 1

gkey="$(shoot_key "$shoot")"
gvalue="$(shoot_val "$shoot")"
exists="$(get_shoot "$gkey")"

if [[ -z "$exists" ]]; then
    # Shoot doesn't exist: add and notify
    add_shoot "$gkey" "$gvalue"
    print_shoot "$gkey" "$gvalue"
    echo "$gvalue"
    clip_copy "$gvalue" &
    notify-send xpanda "Added $gkey â†’ $gvalue to shoot garden"
else
    # Shoot exists: copy and notify
    print_shoot "$gkey" "$exists"
    clip_copy "$exists" &
    notify-send xpanda "Copied $gkey â†’ $exists to clipboard from shoot garden"
fi
